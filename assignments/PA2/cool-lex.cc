#line 2 "cool-lex.cc"

#line 4 "cool-lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 60
#define YY_END_OF_BUFFER 61
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[624] =
    {   0,
        0,    0,    5,    5,    2,    2,   10,   10,   61,   59,
       36,   35,    9,   45,   46,   53,   51,   48,   52,   55,
       54,   37,   50,   49,   56,   57,   58,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   39,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   43,
       44,   47,    5,    5,    6,    5,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    2,    2,    3,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,   10,   10,   13,   15,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   59,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   36,
        4,    8,    1,   37,   40,   41,   42,   38,   38,   38,
       38,   38,   18,   19,   20,   38,   38,   38,   38,   38,

       29,   38,   38,   38,   39,   39,   39,   39,   39,   39,
       18,   19,   20,   39,   39,   39,   39,   39,   29,   39,
       39,   39,   39,    5,    5,    7,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   11,   12,   11,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   38,   38,   38,   38,   38,   38,
       22,   38,   30,   32,   38,   38,   38,   39,   39,   39,
       39,   39,   39,   39,   22,   39,   30,   32,   39,   39,
       39,   39,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   27,   38,   17,   28,
       38,   38,   23,   24,   25,   38,   27,   39,   17,   28,
       39,   39,   39,   23,   24,   25,   33,   39,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   16,   38,   38,   26,   16,   34,
       39,   39,   26,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    2,    2,    2,    2,    2,    2,    2,    2,
        2,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       38,   31,   39,   31,    5,    5,    5,    5,    2,    2,

        2,    2,   10,   10,   10,   10,   38,   39,    5,    5,
        2,    2,   10,   10,   21,   21,    5,    5,    2,    2,
       10,   10,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,   16,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       22,   27,   28,   22,   22,   29,   22,   30,   31,   32,
       22,   33,   34,   35,   36,   37,   38,   22,   22,   22,
        1,   39,    1,    1,   40,    1,   41,   42,   43,   44,

       45,   46,   42,   47,   48,   42,   42,   49,   42,   50,
       51,   52,   42,   53,   54,   55,   56,   57,   58,   42,
       42,   42,   59,    1,   60,   61,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[62] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    5,    1,    1,    1,    1,    1,    1,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    3,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1,    1,
        1
    } ;

static const flex_int16_t yy_base[636] =
    {   0,
        0,    0,   61,    0,  122,    0,  183,    0,  621, 3053,
      580, 3053, 3053,  573, 3053,  550, 3053, 3053,  539, 3053,
     3053,  232, 3053, 3053,  237,  528, 3053,    0,  227,  220,
      222,  227,  227,  234,  225,  229,  235,  236,    0,  246,
      255,  265,  262,  266,  269,  264,  267,  272,  274, 3053,
     3053, 3053,    0,  543,  514,    0,  488,    0,    0,    0,
        0,    0,  289,    0,    0,  297,  469,    0,  325,  386,
      317,  326,  427,  328,  331,  387,  388,  391,  422,  481,
      542,  421,  431,  583,  481,  482,  488,  487,  543,  437,
        0,    0,    0,    0,  465, 3053,  458,    0,    0,    0,

        0,    0,    0,    0,  309,    0,    0,  314,  407,    0,
      637,  698,  544,  546,  739,  585,  637,  579,  548,  638,
      642,  793,  854,  691,  700,  895,  705,  741,  793,  643,
      734,  794,    0,    0,    0,    0,  391, 3053, 3053,    0,
        0,    0,    0,    0,    0,    0,    0,  386,    0,    0,
      360,  370,    0,  949, 1010,  795,  797, 1051,  855,  856,
      891,  702,  861,  949,  378, 1105, 1166,  950,  799, 1207,
      897,  952, 1011,  951, 1014, 1015,    0,    0,    0,  366,
     3053, 3053, 3053,  397, 3053, 3053, 3053,    0,  294,  309,
      329,  393,    0,    0,  394,  387,  419,  464,  466,  470,

        0,  488,  510,  538,    0,  534,  586,  577,  594,  611,
        0,    0,  623,  624,  638,  644,  684,  689,    0,  733,
      746,  740,  789,    0,  363, 3053,  409,    0,    0,    0,
      870, 1024,  965, 1045, 1047, 1054, 1097, 1106, 1113, 1108,
     1110, 1159, 1169, 1107, 1170, 1209, 1211, 1111, 1234, 1173,
     1243, 1202, 1241, 1244, 1245, 1260, 1274, 1275, 1277, 1284,
     1300, 1250, 1315, 1318, 1316, 1332,    0,  359,    0,  417,
        0,    0,    0, 1291, 1341, 1347, 1350, 1348, 1357, 1364,
     1373, 1380, 1389, 1394, 1390, 1405, 1412, 1421, 1426, 1428,
     1437, 1453, 1444, 1462, 1459, 1460, 1463, 1469, 1492, 1485,

     1494, 1496, 1515, 1511, 1509, 1530, 1547, 1533, 1549,    0,
      337,  605,    0,    0,    0, 1534, 1565, 1564, 1566, 1580,
     1581, 1582, 1597, 1596, 1606, 1611, 1627, 1622, 1587, 1638,
     1629, 1652, 3053, 3053, 3053, 1643, 1654, 1661, 1665, 1675,
     1676, 1686, 1691, 1701, 1692, 1702, 1705, 1723, 1718, 1734,
     1737, 1755, 1741, 1764,  805,  797,  853,  866,  898,  896,
        0,  901,    0,    0,  946,  955,  958,  988, 1000, 1057,
     1061, 1055, 1144, 1161,    0, 1161,    0,    0, 1167, 1179,
     1222, 1220, 1766, 1780, 1777, 1787, 1798, 1804, 1803, 1817,
     1819, 1821, 1830, 1835, 1846, 1852, 1857, 1867, 1881, 1884,

     1878, 1900, 1899, 1905, 1914, 1915, 1918, 1931, 1937, 1924,
     1950, 1955, 1969, 1964, 1987, 1990, 1994, 2001, 1996, 2005,
     2019, 2026, 2023, 2036, 2037, 2058, 2059, 2063, 2069, 2080,
     2084, 2094, 2095, 2098, 2099, 2120, 2113, 2116, 2130, 2139,
     2153, 2143, 2156, 2175, 2162, 2178, 2179, 2188, 2192, 2193,
     2210, 2211, 2224, 2225, 2226, 2242, 2243, 2256, 2260, 2261,
     2265, 2274, 2279, 2295, 2297, 2290,    0, 1246,    0,    0,
     1281, 1310,    0,    0,    0, 1329,    0, 1349,    0,    0,
     1362, 1359, 1388,    0,    0,    0,    0, 1434, 2300, 2306,
     2322, 2327, 2329, 2336, 2332, 2338, 2345, 2367, 2354, 2368,

     2369, 2370, 2399, 2372, 2386, 2402, 2408, 2409, 2412, 2431,
     2418, 2434, 2425, 2441, 2444, 2450, 2460, 2463, 2465, 2482,
     2479, 2481, 2484, 2495, 2513, 2508, 2511, 2522, 2524, 2526,
     2527, 2545, 2543, 2548, 2558, 2559, 2562, 2577, 2572, 2575,
     2588, 2598, 2591, 2601, 2607, 2612, 2633, 2630, 2636, 2631,
     2646, 2647, 2652, 2665,    0, 1500, 1560,    0,    0,    0,
     1663, 1674,    0, 2668, 2670, 2679, 2683, 2684, 2686, 2701,
     2710, 2715, 2716, 2719, 2717, 2734, 2741, 2748, 2750, 2752,
     2751, 2765, 2774, 2783, 2784, 2787, 2788, 2790, 2819, 2805,
     1710,    0, 1734,    0, 2820, 2821, 2823, 2824, 2845, 2830,

     2855, 2856, 2860, 2862, 2877, 2878, 1740, 1745, 2887, 2896,
     2910, 2913, 2914, 2931,    0,    0, 2917, 2928, 2932, 2949,
     2950, 2953, 3053,  261,  259, 3002, 3007, 3012, 3017, 3022,
     3027, 3032, 3037, 3042, 3047
    } ;

static const flex_int16_t yy_def[636] =
    {   0,
      623,    1,  623,    3,  623,    5,  623,    7,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  623,
      623,  623,  626,  626,  623,  626,  623,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  627,  627,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  628,
      628,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      626,  626,  626,  629,  629,  623,  629,  629,  629,  629,

      629,  629,  629,  629,  629,  629,  629,  629,  629,  629,
      630,  630,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  631,  631,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  629,  629,  629,  632,  632,  623,  623,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  633,  633,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  634,  635,  635,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  632,  632,  632,  623,
      623,  623,  623,  623,  623,  623,  623,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624,  624,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,  625,  626,  626,  623,  626,  626,  626,  626,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  629,  629,  629,  629,
      629,  629,  629,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  632,
      632,  632,  632,  632,  632,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  623,  623,  623,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,
      625,  625,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  624,  624,  624,  624,  625,  625,
      625,  625,  625,   70,   70,   70,   70,   81,   81,   81,
       81,   81,  112,  112,  112,  112,  123,  123,  123,  123,
      123,  155,  155,  155,  155,  167,  167,  167,  167,  167,
      624,  624,  625,  625,   70,   70,   81,   81,  112,  112,

      123,  123,  155,  155,  167,  167,  624,  625,   70,   81,
      112,  123,  155,  167,  624,  625,   70,   81,  112,  123,
      155,  167,    0,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623
    } ;

static const flex_int16_t yy_nxt[3115] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   22,   23,   24,   25,   26,   10,   27,
       28,   28,   29,   28,   30,   31,   28,   32,   33,   34,
       35,   36,   28,   28,   37,   28,   28,   38,   10,   10,
       39,   39,   40,   39,   41,   42,   39,   43,   44,   45,
       46,   47,   39,   39,   48,   39,   39,   49,   50,   51,
       52,   53,   54,   12,   53,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   63,   64,   65,   66,   67,   53,
       68,   69,   69,   70,   69,   71,   72,   69,   73,   74,
       75,   76,   77,   69,   69,   78,   69,   69,   79,   53,

       53,   80,   80,   81,   80,   82,   83,   80,   84,   85,
       86,   87,   88,   80,   80,   89,   80,   80,   90,   91,
       92,   93,   94,   95,   96,   94,   97,   98,   99,  100,
      101,  102,  103,  104,  105,  105,  106,  107,  108,  109,
       94,  110,  111,  111,  112,  111,  113,  114,  111,  115,
      116,  117,  118,  119,  111,  111,  120,  111,  111,  121,
       94,   94,  122,  122,  123,  122,  124,  125,  122,  126,
      127,  128,  129,  130,  122,  122,  131,  122,  122,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  148,  149,  150,  151,

      152,  136,  153,  154,  154,  155,  154,  156,  157,  154,
      158,  159,  160,  161,  162,  154,  154,  163,  154,  154,
      164,  165,  136,  166,  166,  167,  166,  168,  169,  166,
      170,  171,  172,  173,  174,  166,  166,  175,  166,  166,
      176,  177,  178,  179,  184,  184,  185,  189,  191,  193,
      201,  197,  194,  192,  186,  190,  195,  198,  199,  202,
      196,  203,  204,  205,  200,  188,  206,  189,  191,  193,
      201,  197,  194,  192,  207,  190,  195,  198,  199,  202,
      196,  203,  204,  208,  200,  210,  206,  212,  209,  219,
      215,  213,  211,  217,  207,  214,  216,  220,  221,  218,

      223,  227,  227,  208,  222,  210,  228,  212,  209,  219,
      215,  213,  211,  217,  229,  214,  216,  220,  221,  218,
      223,  270,  270,  271,  222,  224,  224,  355,  224,  356,
      224,  272,  224,  224,  224,  224,  224,  231,  311,  224,
      224,  224,  224,  224,  224,  234,  231,  355,  231,  356,
      235,  231,  240,  236,  231,  242,  231,  231,  241,  231,
      268,  243,  357,  224,  225,  234,  231,  180,  231,  313,
      235,  231,  240,  236,  231,  242,  231,  314,  241,  231,
      334,  243,  357,  224,  224,  224,  224,  224,  315,  224,
      335,  224,  311,  224,  224,  224,  224,  224,  312,  312,

      224,  224,  224,  224,  224,  224,  232,  231,  231,  184,
      184,  231,  244,  358,  233,  231,  231,  246,  245,  231,
      359,  227,  227,  360,  224,  273,  232,  231,  231,  270,
      270,  231,  244,  358,  233,  231,  231,  246,  245,  231,
      359,  248,  231,  360,  224,  224,  224,  231,  247,  251,
      231,  253,  237,  361,  252,  231,  238,  248,  254,  248,
      239,  248,  231,  266,  269,  248,  268,  231,  247,  251,
      231,  253,  237,  361,  252,  231,  238,  248,  254,  248,
      239,  224,  224,  266,  224,  248,  224,  230,  224,  224,
      224,  224,  224,  226,  362,  224,  224,  224,  224,  224,

      224,  248,  248,  363,  364,  258,  260,  248,  248,  248,
      248,  259,  261,  262,  362,  248,  248,  263,  365,  224,
      181,  248,  248,  363,  364,  258,  260,  248,  248,  248,
      248,  259,  261,  262,  366,  248,  248,  263,  365,  224,
      224,  224,  224,  224,  225,  224,  187,  224,  183,  224,
      224,  224,  224,  224,  366,  182,  224,  224,  224,  224,
      224,  224,  249,  248,  274,  367,  274,  368,  274,  264,
      250,  248,  277,  279,  274,  265,  274,  278,  288,  181,
      224,  180,  249,  248,  274,  367,  274,  368,  274,  264,
      250,  248,  277,  279,  274,  265,  274,  278,  288,  274,

      224,  224,  224,  248,  287,  274,  369,  274,  255,  283,
      370,  248,  256,  274,  371,  284,  257,  312,  312,  274,
      623,  623,  623,  248,  287,  274,  369,  274,  255,  283,
      370,  248,  256,  274,  371,  284,  257,  267,  267,  372,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  373,
      623,  267,  267,  267,  267,  267,  267,  274,  274,  372,
      374,  285,  274,  291,  289,  274,  274,  286,  290,  373,
      274,  291,  375,  306,  376,  267,  623,  274,  274,  623,
      374,  285,  274,  291,  289,  274,  274,  286,  290,  623,
      274,  291,  375,  306,  376,  267,  267,  267,  267,  267,

      623,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      623,  291,  267,  267,  267,  267,  267,  267,  275,  294,
      296,  377,  316,  378,  295,  291,  276,  297,  291,  301,
      316,  291,  330,  291,  623,  302,  267,  623,  275,  294,
      296,  377,  316,  378,  295,  291,  276,  297,  291,  301,
      316,  623,  330,  291,  291,  302,  267,  267,  267,  274,
      307,  291,  291,  379,  280,  303,  308,  274,  281,  291,
      380,  304,  282,  623,  291,  381,  623,  623,  623,  274,
      307,  291,  291,  379,  280,  303,  308,  274,  281,  291,
      380,  304,  282,  267,  267,  381,  267,  267,  267,  267,

      267,  267,  267,  267,  267,  623,  623,  267,  267,  267,
      267,  267,  267,  291,  291,  316,  382,  316,  305,  341,
      309,  291,  291,  319,  321,  316,  342,  336,  320,  467,
      468,  267,  623,  291,  291,  316,  382,  316,  305,  341,
      309,  291,  291,  319,  321,  316,  342,  336,  320,  467,
      468,  267,  267,  267,  267,  267,  623,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  623,  623,  267,  267,
      267,  267,  267,  267,  292,  316,  316,  469,  623,  325,
      327,  316,  293,  316,  316,  326,  328,  331,  470,  316,
      231,  623,  267,  623,  292,  316,  316,  469,  231,  325,

      327,  316,  293,  316,  316,  326,  328,  331,  470,  316,
      231,  316,  267,  267,  267,  291,  329,  336,  231,  316,
      298,  346,  471,  291,  299,  336,  472,  347,  300,  623,
      623,  316,  473,  623,  623,  291,  329,  336,  623,  316,
      298,  346,  471,  291,  299,  336,  472,  347,  300,  310,
      310,  623,  473,  310,  310,  310,  310,  310,  310,  310,
      310,  623,  623,  310,  310,  310,  310,  310,  310,  316,
      336,  336,  336,  623,  474,  332,  348,  316,  339,  336,
      336,  351,  349,  340,  475,  384,  476,  623,  623,  316,
      336,  336,  336,  231,  474,  332,  348,  316,  339,  336,

      336,  351,  349,  340,  475,  384,  476,  310,  310,  310,
      310,  310,  477,  231,  310,  310,  310,  310,  310,  310,
      310,  310,  623,  623,  310,  310,  310,  310,  310,  310,
      317,  336,  477,  478,  336,  336,  350,  623,  318,  336,
      352,  354,  336,  336,  231,  623,  353,  623,  623,  623,
      317,  336,  231,  478,  336,  336,  350,  383,  318,  336,
      352,  354,  336,  336,  231,  231,  353,  386,  310,  310,
      310,  316,  231,  231,  231,  231,  322,  383,  385,  316,
      323,  479,  231,  480,  324,  231,  623,  386,  481,  623,
      623,  316,  623,  231,  231,  231,  322,  623,  385,  316,

      323,  479,  231,  480,  324,  310,  310,  623,  481,  310,
      310,  310,  310,  310,  310,  310,  310,  231,  623,  310,
      310,  310,  310,  310,  310,  231,  231,  231,  231,  623,
      231,  248,  387,  231,  231,  231,  231,  231,  231,  248,
      390,  231,  389,  623,  623,  231,  231,  231,  231,  388,
      231,  248,  387,  231,  231,  231,  231,  623,  231,  248,
      390,  231,  389,  310,  310,  310,  310,  310,  482,  388,
      310,  310,  310,  310,  310,  310,  310,  310,  623,  231,
      310,  310,  310,  310,  310,  310,  337,  231,  482,  231,
      231,  483,  484,  397,  338,  485,  391,  231,  231,  231,

      393,  248,  623,  392,  623,  623,  337,  231,  486,  231,
      231,  483,  484,  397,  338,  485,  391,  231,  231,  623,
      393,  248,  399,  392,  310,  310,  310,  336,  486,  231,
      248,  231,  343,  394,  623,  336,  344,  231,  395,  231,
      345,  623,  399,  623,  623,  623,  487,  336,  488,  231,
      248,  231,  343,  394,  248,  336,  344,  231,  395,  231,
      345,  248,  248,  248,  248,  248,  487,  396,  488,  400,
      248,  248,  248,  248,  248,  623,  398,  623,  248,  555,
      248,  248,  248,  248,  248,  248,  401,  396,  248,  400,
      248,  248,  248,  248,  248,  248,  398,  248,  248,  555,

      248,  623,  248,  248,  248,  248,  401,  404,  248,  403,
      402,  274,  248,  556,  248,  248,  623,  248,  623,  274,
      248,  405,  248,  248,  248,  248,  623,  404,  248,  403,
      402,  274,  248,  556,  406,  248,  248,  557,  248,  274,
      248,  405,  408,  248,  248,  407,  248,  623,  248,  623,
      623,  409,  248,  558,  406,  248,  248,  557,  248,  410,
      248,  274,  408,  248,  248,  407,  248,  412,  414,  274,
      274,  409,  248,  558,  411,  274,  274,  274,  274,  410,
      248,  274,  559,  413,  274,  274,  560,  412,  414,  274,
      274,  561,  274,  274,  411,  274,  274,  274,  274,  415,

      274,  274,  559,  413,  274,  274,  560,  623,  274,  274,
      274,  561,  274,  274,  274,  562,  416,  274,  274,  415,
      274,  274,  274,  417,  418,  274,  623,  419,  274,  274,
      274,  623,  274,  274,  274,  562,  416,  274,  274,  420,
      274,  274,  274,  417,  418,  274,  274,  419,  274,  274,
      422,  421,  274,  274,  274,  423,  274,  291,  563,  420,
      274,  274,  623,  623,  425,  291,  274,  623,  274,  274,
      422,  421,  291,  291,  274,  423,  274,  291,  563,  427,
      291,  291,  291,  291,  425,  291,  424,  291,  428,  291,
      291,  291,  291,  291,  623,  426,  623,  291,  623,  427,

      291,  291,  291,  291,  623,  291,  424,  291,  428,  291,
      291,  291,  291,  291,  291,  426,  291,  291,  429,  623,
      291,  430,  291,  623,  291,  291,  432,  591,  431,  291,
      623,  291,  291,  291,  291,  291,  291,  291,  429,  291,
      291,  430,  291,  291,  291,  434,  432,  591,  431,  291,
      291,  291,  433,  291,  316,  291,  623,  291,  291,  291,
      435,  291,  316,  291,  623,  434,  623,  291,  437,  291,
      291,  436,  433,  291,  316,  291,  438,  291,  291,  623,
      435,  291,  316,  592,  440,  316,  316,  291,  437,  291,
      623,  436,  316,  316,  316,  291,  438,  291,  439,  441,

      442,  316,  316,  592,  440,  316,  316,  316,  316,  316,
      316,  623,  316,  316,  316,  316,  316,  316,  439,  441,
      442,  316,  316,  443,  316,  316,  316,  316,  316,  316,
      316,  316,  444,  623,  316,  316,  316,  316,  623,  316,
      445,  446,  316,  443,  316,  316,  316,  316,  623,  316,
      316,  316,  444,  450,  316,  316,  448,  316,  316,  316,
      445,  446,  316,  336,  447,  623,  316,  316,  449,  316,
      316,  336,  316,  450,  336,  316,  448,  316,  316,  451,
      316,  453,  336,  336,  447,  336,  316,  452,  449,  336,
      593,  336,  316,  336,  336,  455,  336,  594,  454,  451,

      316,  453,  336,  336,  456,  336,  336,  452,  623,  336,
      593,  336,  336,  336,  336,  455,  336,  594,  454,  336,
      336,  336,  336,  336,  456,  336,  336,  457,  458,  336,
      336,  336,  336,  336,  336,  460,  459,  623,  336,  336,
      336,  336,  336,  336,  607,  336,  336,  457,  458,  336,
      336,  336,  462,  336,  336,  460,  459,  336,  336,  623,
      461,  336,  336,  336,  607,  336,  336,  463,  608,  336,
      623,  336,  462,  615,  336,  336,  465,  336,  616,  464,
      461,  336,  336,  336,  336,  336,  231,  463,  608,  336,
      489,  466,  336,  615,  231,  336,  465,  231,  616,  464,

      231,  491,  623,  336,  336,  231,  231,  231,  231,  492,
      489,  466,  336,  490,  231,  231,  623,  231,  231,  623,
      231,  491,  493,  231,  231,  231,  231,  231,  231,  492,
      623,  231,  231,  490,  494,  231,  623,  231,  231,  231,
      623,  231,  493,  231,  231,  231,  231,  231,  495,  231,
      231,  231,  231,  623,  494,  231,  623,  231,  496,  231,
      623,  231,  623,  231,  497,  231,  231,  231,  495,  231,
      231,  623,  248,  623,  498,  231,  499,  248,  496,  623,
      248,  623,  623,  231,  497,  248,  231,  248,  623,  623,
      500,  501,  248,  623,  498,  248,  499,  248,  248,  623,

      248,  248,  504,  502,  248,  248,  248,  248,  623,  248,
      500,  501,  248,  623,  623,  248,  623,  503,  248,  248,
      248,  248,  504,  502,  248,  248,  248,  248,  248,  248,
      505,  623,  248,  248,  248,  248,  506,  503,  248,  248,
      248,  623,  248,  248,  248,  248,  507,  248,  248,  623,
      505,  248,  510,  248,  248,  248,  506,  248,  248,  248,
      508,  509,  248,  248,  248,  248,  507,  623,  623,  623,
      274,  248,  510,  623,  511,  274,  623,  248,  274,  248,
      508,  509,  623,  274,  274,  248,  514,  623,  512,  274,
      274,  623,  274,  513,  511,  274,  623,  274,  274,  623,

      623,  623,  623,  274,  274,  623,  514,  274,  512,  274,
      274,  515,  274,  513,  274,  274,  274,  274,  274,  623,
      516,  274,  274,  623,  274,  274,  623,  274,  623,  274,
      274,  515,  517,  274,  274,  274,  274,  623,  274,  274,
      516,  274,  274,  274,  274,  274,  274,  518,  623,  274,
      623,  520,  517,  274,  274,  519,  291,  291,  623,  274,
      521,  623,  623,  274,  291,  291,  274,  518,  623,  623,
      522,  520,  623,  623,  274,  519,  291,  291,  291,  291,
      521,  524,  523,  291,  291,  291,  291,  291,  623,  291,
      522,  291,  623,  526,  623,  623,  525,  291,  291,  291,

      291,  524,  523,  291,  291,  623,  291,  291,  291,  291,
      527,  291,  291,  526,  291,  291,  525,  291,  291,  291,
      291,  623,  291,  291,  291,  528,  291,  529,  291,  623,
      527,  623,  291,  291,  291,  291,  291,  531,  291,  291,
      291,  291,  291,  291,  532,  528,  291,  529,  291,  530,
      316,  623,  623,  291,  533,  623,  291,  531,  316,  316,
      291,  291,  623,  316,  532,  536,  623,  316,  291,  530,
      316,  316,  534,  316,  533,  623,  316,  535,  316,  316,
      537,  316,  316,  316,  316,  536,  623,  316,  623,  623,
      316,  316,  534,  316,  623,  316,  316,  535,  316,  316,

      537,  316,  316,  316,  316,  538,  316,  316,  316,  539,
      316,  623,  316,  316,  623,  316,  316,  623,  316,  316,
      540,  316,  541,  316,  623,  538,  316,  316,  316,  539,
      316,  336,  316,  316,  623,  543,  316,  623,  542,  336,
      540,  316,  541,  623,  336,  336,  336,  623,  546,  545,
      316,  336,  336,  336,  336,  543,  623,  544,  542,  336,
      623,  623,  336,  336,  336,  336,  336,  548,  546,  545,
      336,  336,  336,  336,  336,  547,  336,  544,  623,  623,
      336,  336,  336,  336,  336,  336,  549,  548,  336,  336,
      336,  336,  550,  336,  336,  547,  336,  623,  623,  336,

      336,  336,  336,  623,  336,  336,  549,  551,  336,  336,
      336,  623,  550,  336,  336,  336,  623,  336,  554,  336,
      231,  553,  336,  336,  552,  336,  231,  551,  231,  623,
      336,  623,  623,  623,  231,  336,  623,  336,  554,  564,
      231,  553,  231,  336,  552,  336,  231,  231,  231,  231,
      231,  623,  231,  623,  231,  231,  231,  231,  231,  564,
      231,  565,  231,  566,  231,  231,  231,  231,  623,  231,
      231,  623,  231,  231,  248,  231,  231,  231,  231,  623,
      231,  565,  248,  566,  231,  231,  231,  231,  248,  248,
      248,  567,  248,  231,  248,  231,  248,  248,  248,  623,

      248,  568,  248,  623,  570,  623,  248,  231,  248,  248,
      248,  567,  248,  571,  248,  231,  248,  248,  248,  248,
      248,  568,  248,  569,  570,  623,  248,  248,  248,  248,
      248,  623,  248,  571,  248,  623,  248,  248,  274,  248,
      248,  623,  248,  569,  623,  274,  274,  248,  248,  248,
      248,  248,  248,  274,  274,  572,  248,  248,  274,  248,
      248,  274,  274,  623,  274,  274,  274,  573,  623,  274,
      274,  248,  274,  274,  274,  572,  574,  575,  274,  248,
      274,  274,  274,  274,  274,  274,  623,  573,  274,  274,
      274,  274,  274,  274,  623,  623,  574,  575,  274,  291,

      274,  291,  274,  274,  291,  274,  576,  291,  274,  291,
      274,  274,  291,  274,  577,  291,  623,  623,  623,  291,
      623,  291,  274,  291,  291,  623,  576,  291,  291,  291,
      274,  291,  291,  291,  577,  291,  291,  578,  580,  291,
      579,  291,  291,  291,  291,  623,  291,  291,  291,  623,
      291,  291,  291,  291,  291,  291,  291,  578,  580,  291,
      579,  291,  291,  316,  291,  291,  291,  291,  316,  581,
      291,  316,  291,  291,  291,  291,  316,  623,  316,  316,
      623,  582,  316,  316,  623,  291,  316,  316,  316,  581,
      316,  316,  316,  291,  583,  316,  316,  316,  316,  316,

      316,  582,  316,  316,  584,  316,  316,  316,  316,  623,
      316,  336,  316,  623,  583,  316,  316,  316,  316,  336,
      316,  336,  585,  316,  584,  316,  316,  336,  316,  336,
      623,  336,  336,  623,  586,  336,  316,  623,  316,  336,
      336,  336,  585,  623,  623,  623,  316,  336,  623,  336,
      336,  336,  336,  336,  586,  336,  336,  587,  336,  336,
      336,  336,  588,  589,  336,  623,  336,  336,  623,  623,
      336,  336,  336,  336,  336,  336,  336,  587,  336,  336,
      336,  336,  588,  589,  336,  336,  336,  336,  231,  590,
      231,  623,  336,  336,  336,  336,  231,  595,  231,  231,

      336,  623,  596,  231,  248,  336,  248,  231,  231,  590,
      231,  231,  248,  336,  248,  623,  231,  595,  231,  231,
      623,  248,  596,  231,  248,  623,  248,  231,  597,  248,
      248,  231,  248,  598,  248,  248,  274,  274,  248,  274,
      600,  248,  623,  248,  274,  274,  599,  274,  597,  248,
      248,  623,  623,  598,  274,  248,  274,  274,  248,  274,
      600,  291,  274,  248,  274,  274,  599,  274,  291,  291,
      291,  291,  291,  623,  274,  602,  291,  601,  291,  291,
      291,  291,  274,  623,  623,  316,  623,  623,  291,  291,
      291,  291,  291,  316,  316,  602,  291,  601,  291,  291,

      291,  603,  316,  316,  316,  316,  604,  336,  336,  623,
      336,  316,  316,  316,  316,  336,  336,  605,  336,  623,
      623,  603,  316,  316,  316,  336,  604,  336,  336,  623,
      336,  316,  316,  336,  623,  336,  336,  605,  336,  336,
      231,  231,  606,  248,  248,  336,  623,  336,  231,  231,
      274,  248,  248,  336,  609,  623,  623,  610,  274,  336,
      231,  231,  606,  248,  248,  274,  623,  336,  231,  231,
      274,  248,  248,  274,  609,  291,  291,  610,  274,  611,
      316,  623,  316,  291,  291,  274,  623,  623,  316,  612,
      316,  623,  623,  274,  613,  291,  291,  336,  336,  611,

      316,  623,  316,  291,  291,  336,  336,  231,  316,  612,
      316,  614,  623,  623,  613,  231,  248,  336,  336,  623,
      617,  623,  623,  623,  248,  336,  336,  231,  623,  618,
      274,  614,  623,  291,  316,  231,  248,  231,  274,  623,
      617,  291,  316,  619,  248,  231,  620,  621,  248,  618,
      274,  336,  274,  291,  316,  623,  248,  231,  274,  336,
      274,  291,  316,  619,  622,  231,  620,  621,  248,  291,
      316,  336,  274,  336,  623,  623,  248,  291,  316,  336,
      274,  336,  623,  623,  622,  623,  623,  623,  623,  291,
      316,  623,  623,  336,  623,  623,  623,  291,  316,  623,

      623,  336,  224,  623,  224,  623,  224,  231,  623,  231,
      623,  231,  248,  623,  248,  623,  248,  267,  623,  267,
      267,  267,  274,  623,  274,  274,  274,  291,  623,  291,
      291,  291,  310,  623,  623,  310,  310,  316,  623,  623,
      316,  316,  333,  333,  333,  333,  333,  336,  623,  623,
      336,  336,    9,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623
    } ;

static const flex_int16_t yy_chk[3115] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,   22,   22,   25,   29,   30,   31,
       35,   33,   32,   30,   25,   29,   32,   33,   34,   36,
       32,   37,   38,  625,   34,  624,   40,   29,   30,   31,
       35,   33,   32,   30,   40,   29,   32,   33,   34,   36,
       32,   37,   38,   41,   34,   42,   40,   43,   41,   46,
       44,   43,   42,   45,   40,   43,   44,   47,   48,   45,

       49,   63,   63,   41,   48,   42,   66,   43,   41,   46,
       44,   43,   42,   45,   66,   43,   44,   47,   48,   45,
       49,  105,  105,  108,   48,   69,   69,  189,   69,  190,
       69,  108,   69,   69,   69,   69,   69,   71,  311,   69,
       69,   69,   69,   69,   69,   71,   72,  189,   74,  190,
       71,   75,   74,   72,   72,   75,   74,   71,   74,   75,
      268,   75,  191,   69,  225,   71,   72,  180,   74,  151,
       71,   75,   74,   72,   72,   75,   74,  151,   74,   75,
      165,   75,  191,   69,   69,   69,   70,   70,  152,   70,
      165,   70,  137,   70,   70,   70,   70,   70,  148,  148,

       70,   70,   70,   70,   70,   70,   70,   76,   77,  184,
      184,   78,   76,  192,   70,   76,   77,   78,   77,   78,
      195,  227,  227,  196,   70,  109,   70,   76,   77,  270,
      270,   78,   76,  192,   70,   76,   77,   78,   77,   78,
      195,   82,   79,  196,   70,   70,   70,   73,   79,   82,
       79,   83,   73,  197,   82,   73,   73,   90,   83,   83,
       73,   82,   79,   90,   97,   90,   95,   73,   79,   82,
       79,   83,   73,  197,   82,   73,   73,   90,   83,   83,
       73,   80,   80,   90,   80,   90,   80,   67,   80,   80,
       80,   80,   80,   57,  198,   80,   80,   80,   80,   80,

       80,   85,   86,  199,  200,   85,   86,   88,   87,   85,
       86,   85,   86,   87,  198,   88,   87,   88,  202,   80,
       55,   85,   86,  199,  200,   85,   86,   88,   87,   85,
       86,   85,   86,   87,  203,   88,   87,   88,  202,   80,
       80,   80,   81,   81,   54,   81,   26,   81,   19,   81,
       81,   81,   81,   81,  203,   16,   81,   81,   81,   81,
       81,   81,   81,   89,  113,  204,  114,  206,  119,   89,
       81,   89,  113,  114,  114,   89,  119,  113,  119,   14,
       81,   11,   81,   89,  113,  204,  114,  206,  119,   89,
       81,   89,  113,  114,  114,   89,  119,  113,  119,  118,

       81,   81,   81,   84,  118,  116,  207,  118,   84,  116,
      208,   84,   84,  116,  209,  116,   84,  312,  312,  118,
        9,    0,    0,   84,  118,  116,  207,  118,   84,  116,
      208,   84,   84,  116,  209,  116,   84,  111,  111,  210,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  213,
        0,  111,  111,  111,  111,  111,  111,  117,  120,  210,
      214,  117,  121,  130,  120,  117,  120,  117,  121,  213,
      121,  130,  215,  130,  216,  111,    0,  117,  120,    0,
      214,  117,  121,  130,  120,  117,  120,  117,  121,    0,
      121,  130,  215,  130,  216,  111,  111,  111,  112,  112,

        0,  112,  112,  112,  112,  112,  112,  112,  112,  112,
        0,  124,  112,  112,  112,  112,  112,  112,  112,  124,
      125,  217,  162,  218,  124,  127,  112,  125,  125,  127,
      162,  124,  162,  127,    0,  127,  112,    0,  112,  124,
      125,  217,  162,  218,  124,  127,  112,  125,  125,  127,
      162,    0,  162,  127,  131,  127,  112,  112,  112,  115,
      131,  128,  131,  220,  115,  128,  131,  115,  115,  128,
      221,  128,  115,    0,  131,  222,    0,    0,    0,  115,
      131,  128,  131,  220,  115,  128,  131,  115,  115,  128,
      221,  128,  115,  122,  122,  222,  122,  122,  122,  122,

      122,  122,  122,  122,  122,    0,    0,  122,  122,  122,
      122,  122,  122,  129,  132,  156,  223,  157,  129,  169,
      132,  129,  132,  156,  157,  157,  169,  169,  156,  355,
      356,  122,    0,  129,  132,  156,  223,  157,  129,  169,
      132,  129,  132,  156,  157,  157,  169,  169,  156,  355,
      356,  122,  122,  122,  123,  123,    0,  123,  123,  123,
      123,  123,  123,  123,  123,  123,    0,    0,  123,  123,
      123,  123,  123,  123,  123,  159,  160,  357,    0,  159,
      160,  163,  123,  159,  160,  159,  160,  163,  358,  163,
      231,    0,  123,    0,  123,  159,  160,  357,  231,  159,

      160,  163,  123,  159,  160,  159,  160,  163,  358,  163,
      231,  161,  123,  123,  123,  126,  161,  171,  231,  161,
      126,  171,  359,  126,  126,  171,  360,  171,  126,    0,
        0,  161,  362,    0,    0,  126,  161,  171,    0,  161,
      126,  171,  359,  126,  126,  171,  360,  171,  126,  154,
      154,    0,  362,  154,  154,  154,  154,  154,  154,  154,
      154,    0,    0,  154,  154,  154,  154,  154,  154,  164,
      168,  174,  172,    0,  365,  164,  172,  164,  168,  174,
      172,  174,  172,  168,  366,  233,  367,    0,    0,  164,
      168,  174,  172,  233,  365,  164,  172,  164,  168,  174,

      172,  174,  172,  168,  366,  233,  367,  154,  154,  154,
      155,  155,  368,  233,  155,  155,  155,  155,  155,  155,
      155,  155,    0,    0,  155,  155,  155,  155,  155,  155,
      155,  173,  368,  369,  175,  176,  173,    0,  155,  173,
      175,  176,  175,  176,  232,    0,  175,    0,    0,    0,
      155,  173,  232,  369,  175,  176,  173,  232,  155,  173,
      175,  176,  175,  176,  232,  234,  175,  235,  155,  155,
      155,  158,  232,  234,  236,  235,  158,  232,  234,  158,
      158,  370,  236,  371,  158,  234,    0,  235,  372,    0,
        0,  158,    0,  234,  236,  235,  158,    0,  234,  158,

      158,  370,  236,  371,  158,  166,  166,    0,  372,  166,
      166,  166,  166,  166,  166,  166,  166,  237,    0,  166,
      166,  166,  166,  166,  166,  237,  238,  244,  240,    0,
      241,  248,  238,  239,  238,  244,  240,  237,  241,  248,
      241,  239,  240,    0,    0,  237,  238,  244,  240,  239,
      241,  248,  238,  239,  238,  244,  240,    0,  241,  248,
      241,  239,  240,  166,  166,  166,  167,  167,  373,  239,
      167,  167,  167,  167,  167,  167,  167,  167,    0,  242,
      167,  167,  167,  167,  167,  167,  167,  242,  373,  243,
      245,  374,  376,  250,  167,  379,  242,  243,  245,  242,

      245,  250,    0,  243,    0,    0,  167,  242,  380,  243,
      245,  374,  376,  250,  167,  379,  242,  243,  245,    0,
      245,  250,  252,  243,  167,  167,  167,  170,  380,  246,
      252,  247,  170,  246,    0,  170,  170,  246,  247,  247,
      170,    0,  252,    0,    0,    0,  381,  170,  382,  246,
      252,  247,  170,  246,  249,  170,  170,  246,  247,  247,
      170,  253,  249,  251,  254,  255,  381,  249,  382,  253,
      262,  251,  254,  255,  249,    0,  251,    0,  262,  468,
      256,  253,  249,  251,  254,  255,  256,  249,  256,  253,
      262,  251,  254,  255,  257,  258,  251,  259,  262,  468,

      256,    0,  257,  258,  260,  259,  256,  259,  256,  258,
      257,  274,  260,  471,  257,  258,    0,  259,    0,  274,
      261,  260,  257,  258,  260,  259,    0,  259,  261,  258,
      257,  274,  260,  471,  261,  263,  265,  472,  264,  274,
      261,  260,  264,  263,  265,  263,  264,    0,  261,    0,
        0,  265,  266,  476,  261,  263,  265,  472,  264,  266,
      266,  275,  264,  263,  265,  263,  264,  276,  278,  275,
      277,  265,  266,  476,  275,  276,  278,  279,  277,  266,
      266,  275,  478,  277,  280,  279,  481,  276,  278,  275,
      277,  482,  280,  281,  275,  276,  278,  279,  277,  281,

      282,  281,  478,  277,  280,  279,  481,    0,  282,  283,
      285,  482,  280,  281,  284,  483,  282,  283,  285,  281,
      282,  281,  284,  283,  284,  286,    0,  285,  282,  283,
      285,    0,  287,  286,  284,  483,  282,  283,  285,  286,
      287,  288,  284,  283,  284,  286,  289,  285,  290,  288,
      289,  288,  287,  286,  289,  290,  290,  291,  488,  286,
      287,  288,    0,    0,  293,  291,  289,    0,  290,  288,
      289,  288,  293,  292,  289,  290,  290,  291,  488,  295,
      296,  292,  294,  297,  293,  291,  292,  295,  296,  298,
      294,  297,  293,  292,    0,  294,    0,  298,    0,  295,

      296,  292,  294,  297,    0,  300,  292,  295,  296,  298,
      294,  297,  299,  300,  301,  294,  302,  298,  299,    0,
      299,  300,  301,    0,  302,  300,  302,  556,  301,  305,
        0,  304,  299,  300,  301,  303,  302,  305,  299,  304,
      299,  300,  301,  303,  302,  304,  302,  556,  301,  305,
      306,  304,  303,  308,  316,  303,    0,  305,  306,  304,
      306,  308,  316,  303,    0,  304,    0,  307,  308,  309,
      306,  307,  303,  308,  316,  307,  309,  309,  306,    0,
      306,  308,  316,  557,  318,  317,  319,  307,  308,  309,
        0,  307,  318,  317,  319,  307,  309,  309,  317,  319,

      320,  321,  322,  557,  318,  317,  319,  329,  320,  321,
      322,    0,  318,  317,  319,  329,  324,  323,  317,  319,
      320,  321,  322,  323,  324,  323,  325,  329,  320,  321,
      322,  326,  324,    0,  325,  329,  324,  323,    0,  326,
      325,  326,  328,  323,  324,  323,  325,  327,    0,  331,
      328,  326,  324,  331,  325,  327,  328,  331,  330,  326,
      325,  326,  328,  336,  327,    0,  330,  327,  330,  331,
      328,  336,  332,  331,  337,  327,  328,  331,  330,  332,
      332,  338,  337,  336,  327,  339,  330,  337,  330,  338,
      561,  336,  332,  339,  337,  340,  341,  562,  339,  332,

      332,  338,  337,  340,  341,  339,  342,  337,    0,  338,
      561,  343,  345,  339,  342,  340,  341,  562,  339,  343,
      345,  344,  346,  340,  341,  347,  342,  344,  345,  344,
      346,  343,  345,  347,  342,  347,  346,    0,  349,  343,
      345,  344,  346,  348,  591,  347,  349,  344,  345,  344,
      346,  348,  349,  347,  350,  347,  346,  351,  349,    0,
      348,  353,  350,  348,  591,  351,  349,  351,  593,  353,
        0,  348,  349,  607,  350,  352,  353,  351,  608,  352,
      348,  353,  350,  352,  354,  351,  383,  351,  593,  353,
      383,  354,  354,  607,  383,  352,  353,  385,  608,  352,

      384,  385,    0,  352,  354,  385,  383,  386,  384,  386,
      383,  354,  354,  384,  383,  386,    0,  385,  387,    0,
      384,  385,  387,  389,  388,  385,  387,  386,  384,  386,
        0,  389,  388,  384,  388,  386,    0,  390,  387,  391,
        0,  392,  387,  389,  388,  390,  387,  391,  390,  392,
      393,  389,  388,    0,  388,  394,    0,  390,  393,  391,
        0,  392,    0,  394,  394,  390,  395,  391,  390,  392,
      393,    0,  396,    0,  395,  394,  396,  397,  393,    0,
      396,    0,    0,  394,  394,  397,  395,  398,    0,    0,
      397,  398,  396,    0,  395,  398,  396,  397,  401,    0,

      396,  399,  401,  399,  400,  397,  401,  398,    0,  399,
      397,  398,  400,    0,    0,  398,    0,  400,  401,  403,
      402,  399,  401,  399,  400,  404,  401,  403,  402,  399,
      402,    0,  400,  404,  405,  406,  404,  400,  407,  403,
      402,    0,  405,  406,  410,  404,  407,  403,  402,    0,
      402,  408,  410,  404,  405,  406,  404,  409,  407,  408,
      408,  409,  405,  406,  410,  409,  407,    0,    0,    0,
      411,  408,  410,    0,  411,  412,    0,  409,  411,  408,
      408,  409,    0,  412,  414,  409,  414,    0,  412,  413,
      411,    0,  414,  413,  411,  412,    0,  413,  411,    0,

        0,    0,    0,  412,  414,    0,  414,  415,  412,  413,
      416,  415,  414,  413,  417,  415,  419,  413,  416,    0,
      416,  418,  417,    0,  419,  420,    0,  415,    0,  418,
      416,  415,  418,  420,  417,  415,  419,    0,  416,  421,
      416,  418,  417,  423,  419,  420,  422,  421,    0,  418,
        0,  423,  418,  420,  422,  422,  424,  425,    0,  421,
      424,    0,    0,  423,  424,  425,  422,  421,    0,    0,
      425,  423,    0,    0,  422,  422,  424,  425,  426,  427,
      424,  427,  426,  428,  424,  425,  426,  427,    0,  429,
      425,  428,    0,  429,    0,    0,  428,  429,  426,  427,

      430,  427,  426,  428,  431,    0,  426,  427,  430,  429,
      430,  428,  431,  429,  432,  433,  428,  429,  434,  435,
      430,    0,  432,  433,  431,  432,  434,  435,  430,    0,
      430,    0,  431,  437,  432,  433,  438,  437,  434,  435,
      436,  437,  432,  433,  438,  432,  434,  435,  436,  436,
      439,    0,    0,  437,  439,    0,  438,  437,  439,  440,
      436,  437,    0,  442,  438,  442,    0,  440,  436,  436,
      439,  442,  440,  441,  439,    0,  443,  441,  439,  440,
      443,  441,  445,  442,  443,  442,    0,  440,    0,    0,
      445,  442,  440,  441,    0,  444,  443,  441,  446,  447,

      443,  441,  445,  444,  443,  444,  446,  447,  448,  446,
      445,    0,  449,  450,    0,  444,  448,    0,  446,  447,
      449,  450,  450,  444,    0,  444,  446,  447,  448,  446,
      451,  452,  449,  450,    0,  452,  448,    0,  451,  452,
      449,  450,  450,    0,  453,  454,  455,    0,  455,  454,
      451,  452,  453,  454,  455,  452,    0,  453,  451,  452,
        0,    0,  456,  457,  453,  454,  455,  457,  455,  454,
      456,  457,  453,  454,  455,  456,  458,  453,    0,    0,
      459,  460,  456,  457,  458,  461,  458,  457,  459,  460,
      456,  457,  460,  461,  462,  456,  458,    0,    0,  463,

      459,  460,  462,    0,  458,  461,  458,  463,  459,  460,
      466,    0,  460,  461,  462,  464,    0,  465,  466,  463,
      489,  465,  462,  464,  464,  465,  490,  463,  489,    0,
      466,    0,    0,    0,  490,  464,    0,  465,  466,  490,
      489,  465,  491,  464,  464,  465,  490,  492,  489,  493,
      491,    0,  495,    0,  490,  492,  494,  493,  496,  490,
      495,  493,  491,  494,  494,  497,  496,  492,    0,  493,
      491,    0,  495,  497,  499,  492,  494,  493,  496,    0,
      495,  493,  499,  494,  494,  497,  496,  498,  500,  501,
      502,  498,  504,  497,  499,  498,  500,  501,  502,    0,

      504,  500,  499,    0,  504,    0,  505,  498,  500,  501,
      502,  498,  504,  505,  505,  498,  500,  501,  502,  503,
      504,  500,  506,  503,  504,    0,  505,  503,  507,  508,
      506,    0,  509,  505,  505,    0,  507,  508,  511,  503,
      509,    0,  506,  503,    0,  513,  511,  503,  507,  508,
      506,  510,  509,  513,  512,  510,  507,  508,  511,  510,
      509,  514,  512,    0,  515,  513,  511,  512,    0,  514,
      516,  510,  515,  513,  512,  510,  515,  516,  516,  510,
      517,  514,  512,  518,  515,  519,    0,  512,  517,  514,
      516,  518,  515,  519,    0,    0,  515,  516,  516,  521,

      517,  522,  520,  518,  523,  519,  520,  521,  517,  522,
      520,  518,  523,  519,  522,  524,    0,    0,    0,  521,
        0,  522,  520,  524,  523,    0,  520,  521,  526,  522,
      520,  527,  523,  525,  522,  524,  526,  525,  527,  527,
      526,  525,  528,  524,  529,    0,  530,  531,  526,    0,
      528,  527,  529,  525,  530,  531,  526,  525,  527,  527,
      526,  525,  528,  533,  529,  532,  530,  531,  534,  532,
      528,  533,  529,  532,  530,  531,  534,    0,  535,  536,
        0,  534,  537,  533,    0,  532,  535,  536,  534,  532,
      537,  533,  539,  532,  537,  540,  534,  538,  535,  536,

      539,  534,  537,  540,  538,  538,  535,  536,  541,    0,
      537,  543,  539,    0,  537,  540,  541,  538,  542,  543,
      539,  544,  542,  540,  538,  538,  542,  545,  541,  544,
        0,  543,  546,    0,  544,  545,  541,    0,  542,  543,
      546,  544,  542,    0,    0,    0,  542,  545,    0,  544,
      548,  550,  546,  547,  544,  545,  549,  547,  548,  550,
      546,  547,  548,  549,  549,    0,  551,  552,    0,    0,
      548,  550,  553,  547,  551,  552,  549,  547,  548,  550,
      553,  547,  548,  549,  549,  554,  551,  552,  564,  554,
      565,    0,  553,  554,  551,  552,  564,  565,  565,  566,

      553,    0,  566,  567,  568,  554,  569,  566,  564,  554,
      565,  567,  568,  554,  569,    0,  564,  565,  565,  566,
        0,  570,  566,  567,  568,    0,  569,  566,  570,  570,
      571,  567,  568,  571,  569,  572,  573,  575,  571,  574,
      575,  570,    0,  572,  573,  575,  574,  574,  570,  570,
      571,    0,    0,  571,  576,  572,  573,  575,  571,  574,
      575,  577,  576,  572,  573,  575,  574,  574,  578,  577,
      579,  581,  580,    0,  576,  580,  578,  579,  579,  581,
      580,  577,  576,    0,    0,  582,    0,    0,  578,  577,
      579,  581,  580,  582,  583,  580,  578,  579,  579,  581,

      580,  583,  583,  584,  585,  582,  584,  586,  587,    0,
      588,  584,  585,  582,  583,  586,  587,  588,  588,    0,
        0,  583,  583,  584,  585,  590,  584,  586,  587,    0,
      588,  584,  585,  590,    0,  586,  587,  588,  588,  589,
      595,  596,  589,  597,  598,  590,    0,  589,  595,  596,
      600,  597,  598,  590,  595,    0,    0,  597,  600,  589,
      595,  596,  589,  597,  598,  599,    0,  589,  595,  596,
      600,  597,  598,  599,  595,  601,  602,  597,  600,  599,
      603,    0,  604,  601,  602,  599,    0,    0,  603,  601,
      604,    0,    0,  599,  603,  601,  602,  605,  606,  599,

      603,    0,  604,  601,  602,  605,  606,  609,  603,  601,
      604,  605,    0,    0,  603,  609,  610,  605,  606,    0,
      609,    0,    0,    0,  610,  605,  606,  609,    0,  610,
      611,  605,    0,  612,  613,  609,  610,  617,  611,    0,
      609,  612,  613,  611,  610,  617,  612,  613,  618,  610,
      611,  614,  619,  612,  613,    0,  618,  617,  611,  614,
      619,  612,  613,  611,  614,  617,  612,  613,  618,  620,
      621,  614,  619,  622,    0,    0,  618,  620,  621,  614,
      619,  622,    0,    0,  614,    0,    0,    0,    0,  620,
      621,    0,    0,  622,    0,    0,    0,  620,  621,    0,

        0,  622,  626,    0,  626,    0,  626,  627,    0,  627,
        0,  627,  628,    0,  628,    0,  628,  629,    0,  629,
      629,  629,  630,    0,  630,  630,  630,  631,    0,  631,
      631,  631,  632,    0,    0,  632,  632,  633,    0,    0,
      633,  633,  634,  634,  634,  634,  634,  635,    0,    0,
      635,  635,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,

      623,  623,  623,  623,  623,  623,  623,  623,  623,  623,
      623,  623,  623,  623
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[60] =
    {   0,
       73,   74,   75,   82,   87,   88,   89,  102,  112,  118,
      121,  125,  139,  147,  155,  209,  210,  211,  212,  213,
      214,  215,  216,  217,  218,  219,  220,  221,  222,  223,
      224,  225,  227,  232,  238,  239,  242,  247,  252,  260,
      261,  262,  264,  265,  266,  267,  268,  269,  270,  271,
      272,  273,  274,  275,  276,  277,  278,  279,  284
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "cool.flex"
/*
 *  The scanner definition for COOL.
 */
/*
 *  Stuff enclosed in %{ %} in the first section is copied verbatim to the
 *  output, so headers and global definitions are placed here to be visible
 * to the code in the file.  Don't remove anything that was here initially
 */
/* ----- Declarations begin: */
#line 13 "cool.flex"
#include <cool-parse.h>
#include <stringtab.h>
#include <utilities.h>
#include <string>

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *fin; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread( (char*)buf, sizeof(char), max_size, fin)) < 0) \
		YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

static int comment_layer = 0;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

#line 1477 "cool-lex.cc"
/* ----- Declarations end. */
/* ----- Definitions begin: */

/* ----- Definitions end. */
#line 69 "cool.flex"
 /* ----- Rules begin: */
#line 1484 "cool-lex.cc"

#define INITIAL 0
#define COMMENTS 1
#define INLINE_COMMENTS 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 70 "cool.flex"


 /*  inline comments */
#line 1771 "cool-lex.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 624 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3053 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 60 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 60 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 61 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 73 "cool.flex"
{ BEGIN INLINE_COMMENTS; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 74 "cool.flex"
{ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 75 "cool.flex"
{
    curr_lineno++;
    BEGIN 0;
}
	YY_BREAK
/* Block comments. Notice nested comments */
case 4:
YY_RULE_SETUP
#line 82 "cool.flex"
{
    comment_layer++;
    BEGIN COMMENTS;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 87 "cool.flex"
{ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 88 "cool.flex"
{ }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 89 "cool.flex"
{
    comment_layer--;
    if (comment_layer == 0) {
        BEGIN 0;
    }
}
	YY_BREAK
case YY_STATE_EOF(COMMENTS):
#line 96 "cool.flex"
{
    yylval.error_msg = "EOF in comment";
    BEGIN 0;
    return ERROR;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 102 "cool.flex"
{
    yylval.error_msg = "Unmatched *)";
    return ERROR;
}
	YY_BREAK
/* String constants (C syntax) */
/* seen '\"' string const starts */
case 9:
YY_RULE_SETUP
#line 112 "cool.flex"
{
    BEGIN STRING;
    yymore();
}
	YY_BREAK
/* Cannot read '\\' '\"' '\n' */
case 10:
YY_RULE_SETUP
#line 118 "cool.flex"
{ yymore(); }
	YY_BREAK
/* normal escape characters, not \n */
case 11:
YY_RULE_SETUP
#line 121 "cool.flex"
{ yymore(); }
	YY_BREAK
/* seen a '\\' at the end of a line, the string continues */
/* sth similar to Python change line, with a back slash and a new line */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 125 "cool.flex"
{
    curr_lineno++;
    yymore();
}
	YY_BREAK
/* meet EOF in the middle of a string, error */
case YY_STATE_EOF(STRING):
#line 131 "cool.flex"
{
    yylval.error_msg = "EOF in string constant";
    BEGIN 0;
    yyrestart(yyin);
    return ERROR;
}
	YY_BREAK
/* meet a '\n' in the middle of a string without a '\\', error */
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 139 "cool.flex"
{
    yylval.error_msg = "Unterminated string constant";
    BEGIN 0;
    curr_lineno++;
    return ERROR;
}
	YY_BREAK
/* meet a "\\0" ??? */
case 14:
YY_RULE_SETUP
#line 147 "cool.flex"
{
    yylval.error_msg = "Unterminated string constant";
    BEGIN 0;
    //curr_lineno++;
    return ERROR;
}
	YY_BREAK
/* string ends, we need to deal with some escape characters */
case 15:
YY_RULE_SETUP
#line 155 "cool.flex"
{
    std::string input(yytext, yyleng);

    // remove the '\"'s on both sizes.
    input = input.substr(1, input.length() - 2);

    std::string output = "";
    std::string::size_type pos;
    
    if (input.find_first_of('\0') != std::string::npos) {
        yylval.error_msg = "String contains null character";
        BEGIN 0;
        return ERROR;    
    }

    while ((pos = input.find_first_of("\\")) != std::string::npos) {
        output += input.substr(0, pos);

        switch (input[pos + 1]) {
        case 'b':
            output += "\b";
            break;
        case 't':
            output += "\t";
            break;
        case 'n':
            output += "\n";
            break;
        case 'f':
            output += "\f";
            break;
        default:
            output += input[pos + 1];
            break;
        }

        input = input.substr(pos + 2, input.length() - 2);
    }

    output += input;

    if (output.length() > 1024) {
        yylval.error_msg = "String constant too long";
        BEGIN 0;
        return ERROR;    
    }

    cool_yylval.symbol = stringtable.add_string((char*)output.c_str());
    BEGIN 0;
    return STR_CONST;

}
	YY_BREAK
/* keywords */
case 16:
YY_RULE_SETUP
#line 209 "cool.flex"
{ return CLASS; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 210 "cool.flex"
{ return ELSE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 211 "cool.flex"
{ return FI; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 212 "cool.flex"
{ return IF; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 213 "cool.flex"
{ return IN; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 214 "cool.flex"
{ return INHERITS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 215 "cool.flex"
{ return LET; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 216 "cool.flex"
{ return LOOP; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 217 "cool.flex"
{ return POOL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 218 "cool.flex"
{ return THEN; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 219 "cool.flex"
{ return WHILE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 220 "cool.flex"
{ return CASE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 221 "cool.flex"
{ return ESAC; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 222 "cool.flex"
{ return OF; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 223 "cool.flex"
{ return NEW; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "cool.flex"
{ return ISVOID; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 225 "cool.flex"
{ return NOT; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 227 "cool.flex"
{
    cool_yylval.boolean = 1;
    return BOOL_CONST;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "cool.flex"
{
    cool_yylval.boolean = 0;
    return BOOL_CONST;
}
	YY_BREAK
case 35:
/* rule 35 can match eol */
YY_RULE_SETUP
#line 238 "cool.flex"
{  curr_lineno++;  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 239 "cool.flex"
{}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 242 "cool.flex"
{
    cool_yylval.symbol = inttable.add_string(yytext);
    return INT_CONST;
}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 247 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return TYPEID;
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 252 "cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return OBJECTID;
}
	YY_BREAK
/* operators */
case 40:
YY_RULE_SETUP
#line 260 "cool.flex"
{ return ASSIGN; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 261 "cool.flex"
{ return LE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 262 "cool.flex"
{ return DARROW; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 264 "cool.flex"
{ return '{'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 265 "cool.flex"
{ return '}'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 266 "cool.flex"
{ return '('; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 267 "cool.flex"
{ return ')'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 268 "cool.flex"
{ return '~'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 269 "cool.flex"
{ return ','; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 270 "cool.flex"
{ return ';'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 271 "cool.flex"
{ return ':'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 272 "cool.flex"
{ return '+'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 273 "cool.flex"
{ return '-'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 274 "cool.flex"
{ return '*'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 275 "cool.flex"
{ return '/'; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 276 "cool.flex"
{ return '.'; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 277 "cool.flex"
{ return '<'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 278 "cool.flex"
{ return '='; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 279 "cool.flex"
{ return '@'; }
	YY_BREAK
/* "%"			{ return '%'; } */
/* other errors (e.g. _ at the beginning) */
case 59:
YY_RULE_SETUP
#line 284 "cool.flex"
{
    yylval.error_msg = yytext;
    return ERROR;
}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 289 "cool.flex"
ECHO;
	YY_BREAK
#line 2292 "cool-lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INLINE_COMMENTS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 624 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 624 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 623);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 289 "cool.flex"


